@implements IDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject IShoppingCartService ShoppingCartService
@inject IManageCartItemsLocalStorageService ManageCartItemsLocalStorageService
@rendermode @(new InteractiveServerRenderMode(prerender: false))


<nav class="navbar navbar-expand-lg navbar-dark bg-dark p-0">
    <div class="container">
        <!-- Logo -->
        <a class="navbar-brand @(showSearchBar ? "d-none" : "d-flex")" @onclick="@(() => NavigateToHomePage())">LOGO</a>

        <!-- Thanh tìm kiếm ẩn -->
        <div class="form-search @(showSearchBar ? "active m-3" : "") d-flex w-100 gap-3 justify-content-center align-items-center">
            <input @oninput="SearchProduct" type="text" class="form-control search-bar shadow-none" placeholder="Search...">
            <button class="btn btn-nav shadow-none border-0" type="submit" @onclick="ToggleSearchBar">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>

        <!-- Nút rút gọn cho màn hình di động -->
        <button class="navbar-toggler shadow-none border-0 @(showSearchBar ? "d-none" : "")" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Các Tab Menu và Icon -->
        <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
            <ul class="menu navbar-nav flex-grow-1 justify-content-center @(showSearchBar ? "d-none" : "")">
                <li class="nav-item">
                    <a class="nav-link" @onclick="@(() => NavigateToCategoryPage(1))">Phone</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" @onclick="@(() => NavigateToCategoryPage(2))">Laptop</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" @onclick="@(() => NavigateToCategoryPage(3))">Tablet</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" @onclick="@(() => NavigateToCategoryPage(4))">Accessory</a>
                </li>
            </ul>
            <div class="nav-right d-flex gap-3 justify-content-center @(showSearchBar ? "d-none" : "")">

                <LoginDisplay></LoginDisplay>

                <!-- Icon Search -->
                <button class="btn-search btn btn-nav shadow-none border-0" @onclick="ToggleSearchBar">
                    <FluentIcon Value="@(new Icons.Regular.Size24.Search())" Color="@Color.Fill" />
                </button>
               
                <!-- Icon Cart -->
                <button class="btn-cart btn btn-nav shadow-none border-0" @onclick="NavigateToShoppingCart">
                    <FluentIcon Value="@(new Icons.Regular.Size24.Cart())" Color="@Color.Fill" />
                    <span class="position-absolute  translate-middle badge rounded-pill bg-danger">
                        @shoppingCartItemsCount
                        <span class="visually-hidden">unread messages</span>
                    </span>
                </button>

                

            </div>
        </div>
    </div>
</nav>

<!-- Bảng hiển thị kết quả tìm kiếm -->
<div class="search-results w-100" style="@(showSearchBar ? "display: block;" : "") @(products.Any() ? "padding: 20px 25px;" : "")">
    @if (products.Any())
    {
        <ul class="search-results-list">
            @foreach (var result in products)
            {
                <li class="product-item" @onclick="() => NavigateToDetailPage(result.Id)">
                    <img src="@result.ImageURL" alt="Product Image" class="product-image" />
                    <div class="product-search-list">
                        <span class="product-name">@result.Name</span>
                        <span class="product-price">$@result.Price</span>
                    </div>
                </li>
            }
        </ul>
    }
</div>

<div class="bg-sg" style="@(showSearchBar ? "display: block;" : "")"></div>

@code {
    private bool showSearchBar = false;

    private async void ToggleSearchBar()
    {
        String setBodyStyle = "unset";
        showSearchBar = !showSearchBar;
        StateHasChanged();
        if (showSearchBar)
        {
            setBodyStyle = "hidden";
        }
        await JSRuntime.InvokeVoidAsync("setBodyStyle", setBodyStyle);
    }

    public List<ProductDto> products = new();

    private async void SearchProduct(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (searchTerm.Length >= 2)
        {
            products = (await ProductService.SearchProduct(searchTerm)).ToList();
        }
        else
        {
            products.Clear();
        }
    }

    private void NavigateToDetailPage(int id)
    {
        NavigationManager.NavigateTo($"/Detail/{id}",true);
        ToggleSearchBar();
    }

    private void NavigateToShoppingCart()
    {
        NavigationManager.NavigateTo($"/ShoppingCart",true);
    }

    private void NavigateToHomePage()
    {
        NavigationManager.NavigateTo($"/");
    }

    private void NavigateToCategoryPage(int category)
    {
        NavigationManager.NavigateTo($"/Category/{category}",true);
    }

    private int shoppingCartItemsCount = 0;
    private IEnumerable<CartItemDto> ShoppingCartItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ShoppingCartService.OnShoppingCartChanged += ShoppingCartChanged;
        // ShoppingCartItems = await ManageCartItemsLocalStorageService.GetCollection();

    }

    private void ShoppingCartChanged(int totalQty)
    {
        shoppingCartItemsCount = totalQty;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        ShoppingCartService.OnShoppingCartChanged -= ShoppingCartChanged;
    }
}
