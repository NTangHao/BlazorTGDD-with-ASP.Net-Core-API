@page "/Detail/{Id:int}"
@using TGDD.Api.Entities
@using TGDD.Web.Helpers
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject IShoppingCartService ShoppingCartService
@inject ICartService CartService
@inject IManageCartItemsLocalStorageService ManageCartItemsLocalStorageService 
@inject HistoryProductURL HistoryProductURL
@inject IJSRuntime JSRuntime 
@implements IDisposable

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="container my-5">
    @if (Product != null)
    {
        <div class="row">
            <div class="col-md-6">
                <!-- Main Image Display -->
                <div class="main-image-container mb-3">
                    <img id="mainImage" src="@currentMainImageUrl" class="img-fluid" alt="@Product.Name" />
                </div>

                <!-- Thumbnail Strip -->
                <div class="carousel" id="carousel-thumbnail-strip">
                    @for (int i = 0; i < productImages.Count; i++)
                    {
                        var tempIndex = i;
                        <button class="box @(tempIndex == currentActiveIndex ? "active" : "")" @onclick="() => UpdateActiveImage(tempIndex)">
                            <img src="@productImages[tempIndex]" class="img-fluid" alt="Product Thumbnail" />
                        </button>
                    }


                </div>
            </div>
            <div class="col-md-6">
                <h2>@Product.Name</h2>
                <p>@Product.Description</p>
                <h3>Price: $@Product.Price</h3>
                <!-- Additional product details here -->
                @* <button class="btn btn-primary">Add to Cart</button> *@
                <div>
                <AuthorizeView>
                    <Authorized>
                        <button @onclick="() => (AddToCart_Click(new CartItemToAddDto{
                            CartId = (int)cart?.Id,
                            ProductId = Product.Id,
                            Qty = 1
                        }))" 
                        class="btn btn-success">

                            <b>Add to Cart</b>
                        </button>
                    </Authorized>
                    <NotAuthorized>
                        <a href="/login" class="btn btn-success">
                            <b>Add to Cart</b>
                        </a>
                    </NotAuthorized>
                </AuthorizeView>
                <div>@authMessage</div>
            </div>
            </div>
        </div>
    }
    else
    {
        <p>Loading product details...</p>
    }
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    public ProductDto Product { get; set; }
    private string authMessage = "The user is NOT authenticated.";
    private Cart cart { get; set; }
    private User usercart { get; set; }
    private List<CartItemDto> ShoppingCartItems { get; set; }

    private string currentMainImageUrl;
    private int currentActiveIndex = 0;
    private List<string> productImages = new();
    private DotNetObjectReference<ProductDetail> objectReference;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try      
        {
             HistoryProductURL.returnUrl = NavigationManager.Uri;
            if (authenticationState is not null)
            {
                var authState = await authenticationState;
                var user = authState?.User;
                
                if (user?.Identity is not null && user.Identity.IsAuthenticated)
                {
                    authMessage = $"{user.Identity.Name} is authenticated.";
                    usercart= await CartService.GetUserByName(user.Identity.Name);
                    cart = await CartService.GetCartByUserID(usercart.Id);
                    ShoppingCartItems = await ManageCartItemsLocalStorageService.GetCollection(user.Identity.Name);
                }
                
                
            }

            Product = await ProductService.GetItem(Id);
            if (!string.IsNullOrEmpty(Product?.ProductImages))
            {
                productImages = Product.ProductImages.Split("##").ToList();
                currentMainImageUrl = productImages[0];
                StateHasChanged(); // Force the component to re-render

                // Call the JavaScript function after a slight delay
                objectReference = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("initializeThumbnailAutoScroll", objectReference, 3000);
                await JSRuntime.InvokeVoidAsync("initializeThumbnailDrag");
            }
        }
        catch (Exception ex)
        {
            JSRuntime.InvokeVoidAsync("console.log", ex.Message);
            //Log Exception
        }
    }

    protected async Task AddToCart_Click(CartItemToAddDto cartItemToAddDto)
    {
        try
        {
            
            if (authenticationState is not null)
            {
                var authState = await authenticationState;
                var user = authState?.User;
                if (user?.Identity is not null && user.Identity.IsAuthenticated)
                {

                    var cartItemDto = await ShoppingCartService.AddItem(cartItemToAddDto);
                    if (cartItemDto != null)
                    {
                        ShoppingCartItems.Add(cartItemDto);
                        // Lưu vào localstorage
                        await ManageCartItemsLocalStorageService.SaveCollection(ShoppingCartItems);
                    }

                    NavigationManager.NavigateTo("/ShoppingCart");
                    StateHasChanged();
                }
                else
                {
                   
                    NavigationManager.NavigateTo("/login");
                }

            }            
        }
        catch (Exception ex)
        {
            JSRuntime.InvokeVoidAsync("console.log", ex.Message);
            //Log Exception
        }
    }

	 private void UpdateActiveImage(int index)
    {
        currentActiveIndex = index;
        SetMainImage(productImages[index]);
        StateHasChanged();
    }

    [JSInvokable("SetMainImage")]
    public void SetMainImage(string imageUrl)
    {
        currentMainImageUrl = imageUrl;
        StateHasChanged(); // This updates the UI with the new image URL
    }

    [JSInvokable]
    public int GetCurrentActiveIndex()
    {
        return currentActiveIndex;
    }

    [JSInvokable]
    public void IncrementActiveIndex()
    {
        currentActiveIndex = (currentActiveIndex + 1) % productImages.Count;
        StateHasChanged();
    }

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("clearAutoScrollInterval");
        JSRuntime.InvokeVoidAsync("cleanupThumbnailStrip");
        objectReference?.Dispose();
    }
}