@page "/Detail/{Id:int}"
@using TGDD.Api.Entities
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject IShoppingCartService ShoppingCartService
@inject ICartService CartService
@inject IManageCartItemsLocalStorageService ManageCartItemsLocalStorageService 
@inject IJSRuntime JS

@rendermode @(new InteractiveServerRenderMode(prerender: false))


@if(Product != null)
{
    <div class="row">
        <div class="col-md-6 mb-4">
            <img class="img-fluid" src="@Product.ImageURL">
        </div>
        <div class="col-md-6">
            <h3>@Product?.Name</h3>
            <p class="mb-4">@Product.Description</p>
            <p class="mb-4">
                <b>
                    @Product.Price.ToString("C")&nbsp;(@Product.Qty items in stock)
                </b>
            </p>
            <div>
                <AuthorizeView>
                    <Authorized>
                        <button @onclick="() => (AddToCart_Click(new CartItemToAddDto{
                            CartId = (int)cart?.Id,
                            ProductId = Product.Id,
                            Qty = 1
                        }))" 
                        class="btn btn-success">

                            <b>Add to Cart</b>
                        </button>
                    </Authorized>
                    <NotAuthorized>
                        <a href="/login" class="btn btn-success">
                            <b>Add to Cart</b>
                        </a>
                    </NotAuthorized>
                </AuthorizeView>
                @* <button @onclick="() => (AddToCart_Click(new CartItemToAddDto{
                    CartId = (int)cart?.Id,
                    ProductId = Product.Id,
                    Qty = 1
                }))" 
                class="btn btn-success">

                    <b>Add to Cart</b>
                </button> *@
                <div>@authMessage</div>
            </div>
        </div>

    </div>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    public ProductDto Product { get; set; }
    private string authMessage = "The user is NOT authenticated.";
    private Cart cart { get; set; }
    private User usercart { get; set; }
    private List<CartItemDto> ShoppingCartItems { get; set; }
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try      
        {
            if (authenticationState is not null)
            {
                var authState = await authenticationState;
                var user = authState?.User;
                
                if (user?.Identity is not null && user.Identity.IsAuthenticated)
                {
                    authMessage = $"{user.Identity.Name} is authenticated.";
                    usercart= await CartService.GetUserByName(user.Identity.Name);
                    cart = await CartService.GetCartByUserID(usercart.Id);
                    ShoppingCartItems = await ManageCartItemsLocalStorageService.GetCollection(user.Identity.Name);
                }
                
                
            }

            Product = await ProductService.GetItem(Id);
            


        }
        catch (Exception ex)
        {
            JS.InvokeVoidAsync("console.log", ex.Message);
            //Log Exception
        }
    }

    protected async Task AddToCart_Click(CartItemToAddDto cartItemToAddDto)
    {
        try
        {

            if (authenticationState is not null)
            {
                var authState = await authenticationState;
                var user = authState?.User;
                if (user?.Identity is not null && user.Identity.IsAuthenticated)
                {

                    var cartItemDto = await ShoppingCartService.AddItem(cartItemToAddDto);
                    if (cartItemDto != null)
                    {
                        ShoppingCartItems.Add(cartItemDto);
                        // Lưu vào localstorage
                        await ManageCartItemsLocalStorageService.SaveCollection(ShoppingCartItems);
                    }

                    NavigationManager.NavigateTo("/ShoppingCart");
                    StateHasChanged();
                }
                else
                {
                    NavigationManager.NavigateTo("/login");
                }

            }
           
                
            

            
        }
        catch (Exception ex)
        {
            JS.InvokeVoidAsync("console.log", ex.Message);
            //Log Exception
        }
    }

	// public async Task AddProduct(Product product)
	// {
	// 	await InvokeAsync(() => { OrderState.AddProductToOrder(product);});
	// }
}