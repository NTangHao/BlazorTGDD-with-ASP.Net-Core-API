@page "/login"
@using TGDD.Api.Entities
@using TGDD.Web.Helpers
@inject IAuthService AuthService
@inject IShoppingCartService ShoppingCartService
@inject IManageCartItemsLocalStorageService ManageCartItemsLocalStorageService
@inject NavigationManager NavigationManager
@inject HistoryProductURL HistoryProductURL

@* <h1>Login</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" Class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div> *@

<div class="login-container">
    <div class="login-card">
        <h2 class="login-title">Login to Your Account</h2>

        @if (ShowErrors)
        {
            <div class="alert alert-danger" role="alert">
                <p>@Error</p>
            </div>
        }

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin" class="login-form">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText Id="email" Class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary login-button">Log In</button>
        </EditForm>

        <!-- Registration Option -->
        <div class="register-option">
            <p>Don't have an account? <a class="register" @onclick="NavigateToRegister">Register here</a></p>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";
    private IEnumerable<CartItemDto> ShoppingCartItems { get; set; }
   
    private async Task HandleLogin()
    {
        ShowErrors = false;

        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                ShoppingCartItems = await ManageCartItemsLocalStorageService.GetCollection(user.Identity.Name);
                // Shoot Event to get total quantity cart
                var totalQty = ShoppingCartItems.Sum(i => i.Qty);
                ShoppingCartService.RaiseEventOnShoppingCartChanged(totalQty);
            }
            
            //Navigate back to the page that the user was on before logging in
            NavigationManager.NavigateTo($"{HistoryProductURL.returnUrl}");
            //NavigationManager.NavigateTo($"/");
        }
        else
        {
            Error = result.Error!;
            ShowErrors = true;
        }
    }
    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }
}