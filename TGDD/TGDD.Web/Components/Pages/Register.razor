@page "/register"
@inject IAuthService AuthService
@inject ICartService CartService 
@inject NavigationManager NavigationManager
@using TGDD.Api.Entities

@* <h1>Register</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors!)
        {
            <p>@error</p>
        }
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" class="form-control" @bind-Value="RegisterModel.Email" />
                <ValidationMessage For="@(() => RegisterModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.Password" />
                <ValidationMessage For="@(() => RegisterModel.Password)" />
            </div>
            <div class="form-group">
                <label for="password">Confirm Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
                <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div> *@

<div class="register-container">
    <div class="register-card">
        <h2 class="register-title">Register Your Account</h2>

        @if (ShowErrors)
        {
            <div class="alert alert-danger" role="alert">
                @foreach (var error in Errors!)
                {
                    <p>@error</p>
                }
            </div>
        }

        <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration" class="register-form">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText Id="email" class="form-control" @bind-Value="RegisterModel.Email" />
                <ValidationMessage For="@(() => RegisterModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.Password" />
                <ValidationMessage For="@(() => RegisterModel.Password)" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <InputText Id="confirmPassword" type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
                <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-primary register-button">Register</button>
        </EditForm>

        <!-- Login Option -->
        <div class="login-option">
            <p>Already have an account? <a class="login" @onclick="NavigateToLogin">Login here</a></p>
        </div>
    </div>
</div>

@* <style>
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f2f2f2;
    }


    .register-card {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        width: 100%;
    }

    .register-title {
        text-align: center;
        color: #333;
        margin-bottom: 1rem;
    }

    .register-form .form-group {
        margin-bottom: 1rem;
    }

    .register-form .form-control {
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    .register-button {
        width: 100%;
        padding: 0.5rem;
        margin-top: 1rem;
    }

    .login-option {
        text-align: center;
        margin-top: 1rem;
    }

        .login-option .login {
            color: #007bff;
            text-decoration: none;
            cursor: pointer;
        }

            .login-option .login:hover {
                text-decoration: underline;
            }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
        padding: 0.75rem 1.25rem;
        margin-top: 1rem;
        border-radius: 4px;
        font-size: 0.875rem;
    }

</style> *@

@code {

    private RegisterModel RegisterModel = new RegisterModel();
    private bool ShowErrors;
    private IEnumerable<string>? Errors;
    private User user { get; set; }

    private async Task HandleRegistration()
    {
        ShowErrors = false;

        var result = await AuthService.Register(RegisterModel);

        if (result.Successful)
        {
            user = await CartService.GetUserByName(RegisterModel.Email);
            // debug here and see if user is null
            var cartResult= await CartService.AddItem(user.Id);          

            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Errors = result.Errors;
            ShowErrors = true;
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

}