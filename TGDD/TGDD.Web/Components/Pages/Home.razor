@page "/"
@* @inherits ProductsBase *@
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject ProductServiceClient ProductServiceClient
@inject IShoppingCartService ShoppingCartService
@inject IManageCartItemsLocalStorageService ManageCartItemsLocalStorageService
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Home</PageTitle>



@if (Products != null)
{
    
    <FluentGrid Justify="JustifyContent.Center">

        @foreach (var product in Products)
        {
            <FluentGridItem xs="12" sm="6" md="3" Justify="JustifyContent.Center">
                <FluentCard class="text-center product-info product-container">
                    <div @onclick="()=>NavigateToDetailPage(product.Id)">
                        <img class="card-img-top w-30 img-fluid" src="@product.ImageURL" alt="..." />
                        <p class="m-2">@product.Name</p>
                        <strong class="m-2 price">
                            <span class="text-muted">@product.Price.ToString("C")</span>
                        </strong>

                        <FluentButton OnClick="()=> NavigateToDetailPage(product.Id)"
                                      IconStart="@(new Icons.Regular.Size24.Cart())" class="d-block">
                            Mua Ngay
                        </FluentButton>
                    </div>
                </FluentCard>
            </FluentGridItem>
        }

    </FluentGrid>
}
else
{
    <h2>Loading</h2>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private IEnumerable<ProductDto> Products { get; set; }
    private IEnumerable<CartItemDto> ShoppingCartItems { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await ClearLocalStorage();
        // Products = await ProductService.GetItems();
        Products = await ProductServiceClient.GetItems();

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                ShoppingCartItems = await ManageCartItemsLocalStorageService.GetCollection(user.Identity.Name);
                // Shoot Event to get total quantity cart
                var totalQty = ShoppingCartItems.Sum(i => i.Qty);
                ShoppingCartService.RaiseEventOnShoppingCartChanged(totalQty);
            }
        }
        StateHasChanged();
       

        
    }

    private void NavigateToDetailPage(int id)
    {
        NavigationManager.NavigateTo($"/Detail/{id}");
    }

    
    private async Task ClearLocalStorage()
    {
        await ManageCartItemsLocalStorageService.RemoveCollection();
        
    }
}
