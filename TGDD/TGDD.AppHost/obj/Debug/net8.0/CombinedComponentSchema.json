{
  "definitions": {
    "logLevel": {
      "properties": {
        "Azure": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Azure.Core": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Azure.Identity": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Azure.Messaging.ServiceBus": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Aspire.StackExchange.Redis": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.Extensions.Caching.StackExchangeRedis": {
          "$ref": "#/definitions/logLevelThreshold"
        },
        "Microsoft.AspNetCore.OutputCaching.StackExchangeRedis": {
          "$ref": "#/definitions/logLevelThreshold"
        }
      }
    }
  },
  "properties": {
    "Aspire": {
      "type": "object",
      "properties": {
        "Azure": {
          "type": "object",
          "properties": {
            "Messaging": {
              "type": "object",
              "properties": {
                "ServiceBus": {
                  "type": "object",
                  "properties": {
                    "Namespace": {
                      "type": "string",
                      "description": "Gets or sets the fully qualified Service Bus namespace. Used along with \u0022Credential\u0022 to establish the connection."
                    },
                    "ConnectionString": {
                      "type": "string",
                      "description": "Gets or sets connection string used to connect to the Service Bus namespace."
                    },
                    "HealthCheckQueueName": {
                      "type": "string",
                      "description": "Name of the queue used by the health check. Mandatory to get health checks enabled."
                    },
                    "HealthCheckTopicName": {
                      "type": "string",
                      "description": "Name of the topic used by the health check. Mandatory to get health checks enabled"
                    },
                    "Tracing": {
                      "type": "boolean",
                      "description": "A boolean value that indicates whether the OpenTelemetry tracing is enabled or not"
                    },
                    "ClientOptions": {
                      "type": "object",
                      "description": "The set of options that can be specified when creating an Azure.Messaging.ServiceBus.ServiceBusConnection to configure its behavior.",
                      "properties": {
                        "ConnectionIdleTimeout": {
                          "type": "string",
                          "format": "duration",
                          "description": "The amount of time to allow a connection to have no observed traffic before considering it idle and eligible to close."
                        },
                        "CustomEndpointAddress": {
                          "type": "string",
                          "format": "uri",
                          "description": "A custom endpoint address that can be used when establishing the connection to the Service Bus service."
                        },
                        "EnableCrossEntityTransactions": {
                          "type": "boolean",
                          "Description": "Gets or sets a flag that indicates whether or not transactions may span multiple Service Bus entities."
                        },
                        "Identifier": {
                          "type": "string",
                          "Description": "A property used to set the ServiceBusClient ID to identify the client. This can be used to correlate logs and exceptions. If null or empty, a random unique value will be used."
                        },
                        "RetryOptions": {
                          "type": "object",
                          "description": "The set of options to use for determining whether a failed service operation should be retried and, if so, the amount of time to wait between retry attempts. These options also control the amount of time allowed for the individual network operations used for interactions with the Service Bus service.",
                          "properties": {
                            "Delay": {
                              "type": "string",
                              "format": "duration",
                              "description": "The delay between retry attempts for a fixed approach or the delay on which to base calculations for a backoff-based approach."
                            },
                            "MaxDelay": {
                              "type": "string",
                              "format": "duration",
                              "description": "The maximum permissible delay between retry attempts."
                            },
                            "MaxRetries": {
                              "type": "integer",
                              "description": "The maximum number of retry attempts before considering the associated operation to have failed."
                            },
                            "Mode": {
                              "enum": [
                                "Fixed",
                                "Exponential"
                              ],
                              "description": "The approach to use for calculating retry delays."
                            },
                            "TryTimeout": {
                              "type": "string",
                              "format": "duration",
                              "description": "The maximum duration to wait for completion of a single attempt, whether the initial attempt or a retry."
                            }
                          }
                        },
                        "TransportType": {
                          "enum": [
                            "AmqpTcp",
                            "AmqpWebSockets"
                          ],
                          "Description": "The type of protocol and transport that will be used for communicating with the Service Bus service."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "StackExchange": {
          "type": "object",
          "properties": {
            "Redis": {
              "type": "object",
              "properties": {
                "ConfigurationOptions": {
                  "type": "object",
                  "description": "The options relevant to a set of redis connections.",
                  "properties": {
                    "AbortOnConnectFail": {
                      "type": "boolean",
                      "description": "Gets or sets whether connect/configuration timeouts should be explicitly notified via a TimeoutException."
                    },
                    "AllowAdmin": {
                      "type": "boolean",
                      "description": "Indicates whether admin operations should be allowed."
                    },
                    "AsyncTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that the system should allow for asynchronous operations (defaults to SyncTimeout)."
                    },
                    "CheckCertificateRevocation": {
                      "type": "boolean",
                      "description": "A Boolean value that specifies whether the certificate revocation list is checked during authentication."
                    },
                    "ClientName": {
                      "type": "string",
                      "description": "The client name to use for all connections."
                    },
                    "ConnectTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that should be allowed for connection (defaults to 5 seconds unless SyncTimeout is higher)."
                    },
                    "ConfigurationChannel": {
                      "type": "string",
                      "description": "Channel to use for broadcasting and listening for configuration change notification."
                    },
                    "ConnectRetry": {
                      "type": "integer",
                      "description": "The number of times to repeat the initial connect cycle if no servers respond promptly."
                    },
                    "ConfigCheckSeconds": {
                      "type": "integer",
                      "description": "Check configuration every n seconds (every minute by default)."
                    },
                    "DefaultDatabase": {
                      "type": "integer",
                      "description": "Specifies the default database to be used when calling \u003Csee cref=\u0022ConnectionMultiplexer.GetDatabase(int, object)\u0022/\u003E without any parameters."
                    },
                    "DefaultVersion": {
                      "type": "string",
                      "description": "The server version to assume."
                    },
                    "HeartbeatInterval": {
                      "type": "string",
                      "format": "duration",
                      "description": "Controls how often the connection heartbeats. A heartbeat includes: evaluating if any messages have timed out, evaluating connection status (checking for failures), sending a server message to keep the connection alive if needed."
                    },
                    "IncludeDetailInExceptions": {
                      "type": "boolean",
                      "description": "Should exceptions include identifiable details? (key names, additional .Data annotations)"
                    },
                    "IncludePerformanceCountersInExceptions": {
                      "type": "boolean",
                      "description": "Should exceptions include performance counter details?"
                    },
                    "KeepAlive": {
                      "type": "integer",
                      "description": "Specifies the time in seconds at which connections should be pinged to ensure validity. -1 Defaults to 60 Seconds."
                    },
                    "User": {
                      "type": "string",
                      "description": "The username to use to authenticate with the server."
                    },
                    "Password": {
                      "type": "string",
                      "description": "The password to use to authenticate with the server."
                    },
                    "Proxy": {
                      "enum": [
                        "None",
                        "Twemproxy",
                        "Envoyproxy"
                      ],
                      "descripion": "Type of proxy to use (if any)."
                    },
                    "ResolveDns": {
                      "type": "boolean",
                      "descripion": "Indicates whether endpoints should be resolved via DNS before connecting. If enabled the ConnectionMultiplexer will not re-resolve DNS when attempting to re-connect after a connection failure."
                    },
                    "ServiceName": {
                      "type": "string",
                      "description": "The service name used to resolve a service via sentinel."
                    },
                    "SetClientLibrary": {
                      "type": "boolean",
                      "description": "Gets or sets whether the library should identify itself by library-name/version when possible."
                    },
                    "Ssl": {
                      "type": "boolean",
                      "descripion": "Indicates whether the connection should be encrypted."
                    },
                    "SslHost": {
                      "type": "string",
                      "description": "The target-host to use when validating SSL certificate; setting a value here enables SSL mode."
                    },
                    "SslProtocols": {
                      "enum": [
                        "None",
                        "Ssl2",
                        "Ssl3",
                        "Tls",
                        "Default",
                        "Tls11",
                        "Tls12",
                        "Tls13"
                      ],
                      "description": "Configures which SSL/TLS protocols should be allowed. If not set, defaults are chosen by the .NET framework."
                    },
                    "SyncTimeout": {
                      "type": "integer",
                      "description": "Specifies the time in milliseconds that the system should allow for synchronous operations (defaults to 5 seconds)."
                    },
                    "TieBreaker": {
                      "type": "string",
                      "description": "Tie-breaker used to choose between primaries (must match the endpoint exactly)."
                    }
                  }
                },
                "ConnectionString": {
                  "type": "string",
                  "description": "Gets or sets the comma-delimited configuration string used to connect to the Redis server."
                },
                "HealthChecks": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the Redis health check is enabled or not.",
                  "default": true
                },
                "Tracing": {
                  "type": "boolean",
                  "description": "Gets or sets a boolean value that indicates whether the OpenTelemetry tracing is enabled or not.",
                  "default": true
                }
              }
            }
          }
        }
      }
    }
  },
  "type": "object",
  "SourceSegments": "C:\\Users\\Dung Bui\\.nuget\\packages\\aspire.azure.messaging.servicebus\\8.0.0-preview.2.23619.3\\ConfigurationSchema.json;C:\\Users\\Dung Bui\\.nuget\\packages\\aspire.stackexchange.redis\\8.0.0-preview.2.23619.3\\ConfigurationSchema.json;C:\\Users\\Dung Bui\\.nuget\\packages\\aspire.stackexchange.redis.distributedcaching\\8.0.0-preview.2.23619.3\\ConfigurationSchema.json;C:\\Users\\Dung Bui\\.nuget\\packages\\aspire.stackexchange.redis.outputcaching\\8.0.0-preview.2.23619.3\\ConfigurationSchema.json"
}